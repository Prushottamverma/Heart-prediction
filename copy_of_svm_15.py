# -*- coding: utf-8 -*-
"""Copy of svm_15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13iJQ08y1mYdowBsCXKjTHiAqbHwlmVRi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.datasets import load_breast_cancer
cancer=load_breast_cancer()
print(cancer)

from sklearn.datasets import load_breast_cancer
cancer=load_breast_cancer()
x=cancer.data[:,:2]
y=cancer.target
print (y)

y_name=cancer.target_names
print (y_name)

#convert
xd=pd.DataFrame(x)

sns.heatmap(xd.isnull())

xd=pd.DataFrame(y)

sns.heatmap(xd.isnull())

#split into train test
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=1)

#apply svm
from sklearn.svm import SVC
from sklearn.inspection import DecisionBoundaryDisplay
svm_model=SVC(kernel="rbf",gamma=.5,C=1)
svm_model.fit(x_train,y_train)

# decision boundary display
import matplotlib.colors
mycol=matplotlib.colors.ListedColormap(['red','blue'])
DecisionBoundaryDisplay.from_estimator(
    svm_model,
    x,
    response_method="predict",
    cmap=mycol,
    xlabel=cancer.feature_names[0],
    ylabel=cancer.feature_names[1],
)

radius=x[:,0]
txt=x[:,1]
#check whetrher cancer is present or not
inp=[[18,20]]
yp=svm_model.predict(inp)
print(y_name[yp[0]])
plt.scatter(radius,txt,c=y,)
#if cancer is present then red dot appaer
plt.scatter(18,20,color="white")

#accuracy find step
y_pred=svm_model.predict(x_test)
from sklearn.metrics import classification_report
cr=classification_report(y_test,y_pred)
print(cr)